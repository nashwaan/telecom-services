// silence JSLint error: variable used before it was defined
/*global angular*/


(function (angular) {
    'use strict';

    // initialize 'servicesDesignerApp' module
    angular.module('TheApp', ['ngRoute',
                              'ngMessages',
                              'ngMaterial',
                              'ngMdIcons',
                              'ui.router',
                              'dndLists',
                              'agGrid']);
    
    angular.module('TheApp').config(['$routeProvider', '$locationProvider', '$mdThemingProvider', '$mdIconProvider', function ($routeProvider, $locationProvider, $mdThemingProvider, $mdIconProvider) {

        //
        $routeProvider
            /*.when('/login', {
                templateUrl: 'login-part/login.html'
            })*/
            .when('/assemble', {
                templateUrl: 'assemble-part/assemble.html'
            })
            .when('/manufacture', {
                templateUrl: 'manufacture-part/manufacture.html'
            })
            .when('/international', {
                templateUrl: 'international-part/international.html'
            })
            .otherwise({
                redirectTo: '/assemble'
            });

        // use the HTML5 History API to avoid '#' in the URL
        //$locationProvider.html5Mode(true);

        /*jslint bitwise: true*/

        function rgbToHex(r, g, b) {
            return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        }

        function shadeColor(color, percent) {
            var f = parseInt(color.slice(1), 16),
                t = percent < 0 ? 0 : 255,
                p = percent < 0 ? percent * -1 : percent,
                R = f >> 16,
                G = f >> 8 & 0x00FF,
                B = f & 0x0000FF;
            return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
        }

        function blendColors(c0, c1, p) {
            var f = parseInt(c0.slice(1), 16),
                t = parseInt(c1.slice(1), 16),
                R1 = f >> 16,
                G1 = f >> 8 & 0x00FF,
                B1 = f & 0x0000FF,
                R2 = t >> 16,
                G2 = t >> 8 & 0x00FF,
                B2 = t & 0x0000FF;
            return "#" + (0x1000000 + (Math.round((R2 - R1) * p) + R1) * 0x10000 + (Math.round((G2 - G1) * p) + G1) * 0x100 + (Math.round((B2 - B1) * p) + B1)).toString(16).slice(1);
        }

        /*jslint bitwise: false*/

        var primaryColor = "#84b478",
            accentColor = "#fce2c7";
        $mdThemingProvider.definePalette('etisalatGreenPalette', {
            '50': shadeColor(primaryColor, 0.80),
            '100': shadeColor(primaryColor, 0.60),
            '200': shadeColor(primaryColor, 0.40),
            '300': shadeColor(primaryColor, 0.20),
            '400': shadeColor(primaryColor, 0.0),
            '500': shadeColor(primaryColor, -0.20),
            '600': shadeColor(primaryColor, -0.40),
            '700': shadeColor(primaryColor, -0.55),
            '800': shadeColor(primaryColor, -0.70),
            '900': shadeColor(primaryColor, -0.85),
            'A100': shadeColor(primaryColor, 0.40),
            'A200': shadeColor(primaryColor, 0.0),
            'A400': shadeColor(primaryColor, -0.40),
            'A700': shadeColor(primaryColor, -0.70),
            'contrastDefaultColor': 'light', //  whether text (contrast) on this palette should be dark or light
            'contrastDarkColors': ['50', '100', '200', '300', '400', 'A100'],
            'contrastLightColors': ['500', '600', '700', '800', '900', 'A400', 'A700']
        });
        $mdThemingProvider.definePalette('etisalatGreyPalette', {
            '50': shadeColor(accentColor, 0.80),
            '100': shadeColor(accentColor, 0.60),
            '200': shadeColor(accentColor, 0.40),
            '300': shadeColor(accentColor, 0.20),
            '400': shadeColor(accentColor, 0.0),
            '500': shadeColor(accentColor, -0.20),
            '600': shadeColor(accentColor, -0.40),
            '700': shadeColor(accentColor, -0.55),
            '800': shadeColor(accentColor, -0.70),
            '900': shadeColor(accentColor, -0.85),
            'A100': shadeColor(accentColor, 0.40),
            'A200': shadeColor(accentColor, 0.0),
            'A400': shadeColor(accentColor, -0.40),
            'A700': shadeColor(accentColor, -0.70),
            'contrastDefaultColor': 'dark', //  whether text (contrast) on this palette should be dark or light
            'contrastDarkColors': ['50', '100', '200', '300', '400', 'A100'],
            'contrastLightColors': ['500', '600', '700', '800', '900', 'A400', 'A700']
        });

        // configure the default theme
        $mdThemingProvider.theme('default')
            .primaryPalette('etisalatGreenPalette')
            .accentPalette('etisalatGreyPalette');
        //  .backgroundPalette('')
        //  .warnPalette('');

        // configure 'etisalat-dark' theme
        $mdThemingProvider.theme('etisalat-dark', 'default')
            .primaryPalette('orange')
            .dark();

        // set default size of md-icon
        $mdIconProvider.defaultViewBoxSize(40);

        // configure URLs for icons specified by [set:]id.
        $mdIconProvider
            .iconSet('gui', 'icons/gui-icons.svg')
            .iconSet('$default', 'icons/master-icons.svg')
            .icon('logo', 'icons/logo.svg');

    }]);
    
    angular.module('TheApp').run(function ($log) {
        $log.debug("TheApp with its dependecies is loaded and running...");
        /*$rootScope.$on('$stateChangeStart', function (event, next) {
            var authorizedRoles = next.data.authorizedRoles;
            if (!AuthService.isAuthorized(authorizedRoles)) {
                event.preventDefault();
                if (AuthService.isAuthenticated()) {
                    // user is not allowed
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthorized);
                } else {
                    // user is not logged in
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated);
                }
            }
        });*/
    });

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/


(function (angular) {
    'use strict';

    //
    angular.module('TheApp')
        .filter('icon_file', function () {
            return function (input, uppercase) {

                // ensure the input is a valid string
                input = input || '';

                // remove white space from the string (regex: \s white space  + one or more occurance  /g global search)
                var filename = input.replace(/\s+/g, '');

                // conditional based on optional argument
                if (uppercase) {
                    filename = filename.toUpperCase();
                }

                // prepend 'icon' to filename
                return 'icon' + filename;
            };

        })
        .filter('icon_provider', function () {
            return function (input) {
                
                // default to 'generic' if no input is supplied
                input = input || 'generic';

                // remove white space from the string (regex: \s white space  + one or more occurance  /g global search)
                var svgId = input.replace(/\s+/g, '');

                // prepend 'master:' to svgId
                return 'master:' + svgId;
            };

        });

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/


(function (angular) {
    'use strict';

    // define controller for app, schemasService is injected here for early initialization
    angular.module('TheApp').controller('mainController', ['$rootScope', '$http', 'loginService', function ($rootScope, $http, loginService) {
        var self = this;
        $rootScope.selected = {
            "item": null,
            "type": ""
        };
        self.isAuthenticated = function() {
            return true || loginService.isAuthenticated();
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/


(function (angular) {
    'use strict';

    //
    angular.module('TheApp')
        .directive('etsDraggable', ['$document', function ($document) {

            return {
                link: function (scope, element, attr) {
                    var startX = 0,
                        startY = 0,
                        x = 0,
                        y = 0;

                    function mousemove(event) {
                        y = event.pageY - startY;
                        x = event.pageX - startX;
                        element.css({
                            top: y + 'px',
                            left: x + 'px'
                        });
                    }

                    function mouseup() {
                        $document.off('mousemove', mousemove);
                        $document.off('mouseup', mouseup);
                    }

                    element.on('mousedown', function (event) {
                        // Prevent default dragging of selected content
                        event.preventDefault();
                        startX = event.pageX - x;
                        startY = event.pageY - y;
                        $document.on('mousemove', mousemove);
                        $document.on('mouseup', mouseup);
                    });

                    element.css({
                        position: 'relative',
                        border: '1px solid red',
                        backgroundColor: 'lightgrey',
                        cursor: 'pointer'
                    });

                }

            };
        }])
        .directive('elastic', ['$timeout', function ($timeout) {
            return {
                restrict: 'A',
                link: function ($scope, element) {
                    $scope.initialHeight = $scope.initialHeight || element[0].style.height;
                    var resize = function () {
                        element[0].style.height = $scope.initialHeight;
                        element[0].style.height = element[0].scrollHeight + "px";
                    };
                    //element.on("input change", resize);
                    element.on("blur keyup change", resize);
                    $timeout(resize, 0);
                }
            };
        }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global console*/


(function (angular) {
    'use strict';

    //
    angular.module('TheApp').factory('schemasService', ['$http', function ($http) {
        var schemas, masterIcons;

        function findSchema(name) {
            if (schemas) {
                var i;
                for (i = 0; i < schemas.length; i += 1) {
                    if (schemas[i].name === name) {
                        return schemas[i];
                    }
                }
            }
        }
        
        (function loadSchemas(path) {
            $http.get(path).then(function (response) {
                schemas = response.data;
            }, function (response) {
                console.warn("Could not load schemas.", response);
            });
        }('api/schemas'));

        (function loadMasterIcons(path) {
            $http.get(path).then(function (response) {
                masterIcons = response.data;
            }, function (response) {
                console.warn("Could not load masters icons.", response);
            });
        }('data/master-icons.json'));

        return {
            masterIcons: function () {
                return masterIcons;
            },
            schema: function (objectName) {
                var schema = findSchema(objectName);
                return schema ? schema.schema : null;
            },
            fresh: function (objectName) {
                var schema = findSchema(objectName);
                return schema ? schema.fresh : null;
            }
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global io*/
/*global console*/


(function (angular) {
    'use strict';

    angular.module('TheApp').constant('USER_ROLES', {
        all: '*',
        admin: 'admin',
        editor: 'editor',
        guest: 'guest'
    });
    
    angular.module('TheApp').config(['$httpProvider', function($httpProvider) {
        
        $httpProvider.interceptors.push(['$rootScope', '$q', function ($rootScope, $q) {
            return {
                "request": function(config) {
                    return config;
                },
                "requestError": function(rejection) {
                    //if (canRecover(rejection)) { return responseOrNewPromise }
                    return $q.reject(rejection);
                },
                "response": function(response) {
                    return response;
                },
                "responseError": function(rejection) {
                    if (rejection.status === 401) {
                        console.log("rejection: ", rejection);
                        var deferred = $q.defer();
                        $rootScope.requests401.push({"config": rejection.config, "deferred": deferred});
                        $rootScope.$broadcast('event:loginRequired');
                        return deferred.promise;
                    } else {
                        return $q.reject(rejection);
                    }
                }
            };
        }]);
        
    }]);
    
    angular.module('TheApp').factory('loginService', ['$rootScope', '$http', function ($rootScope, $http) {
        var email, name, role;
        var socket = io(); // io() with no args does auto-discovery
        $rootScope.requests401 = [];

        function resetLogin() {
            email = null;
            name = null;
            role = null;            
        }
        
        function retryUnauthorizedRequests () {
            var i;
            for (i = 0; i < $rootScope.requests401.length; i++) {
                (function (req) {
                    $http(req.config).then(function(response) {
                        req.deferred.resolve(response);
                    });
                }($rootScope.requests401[i]));
            }
            $rootScope.requests401 = [];
        }

        $rootScope.$on('event:loginRequired', function () {
            resetLogin();
        });
        
        socket.on('connect', function () {
            console.info('Connected to server via socket.io');
        });
        socket.on('error', function (reason) {
            console.error('Unable to connect socket.io', reason);
        });
        socket.on('logout', function () {
            $rootScope.$apply(function () {
                resetLogin();
            });
            console.info('Instructed by server to logout');
        });
        
        return {
            "getEmail": function() {
                return email;
            },
            "getName": function() {
                return name;
            },
            "getRole": function() {
                return role;
            },
            "login": function (credentials) {
                //return $http.post('auth/login', "username=" + encodeURIComponent(credentials.username) + "&password=" + encodeURIComponent(credentials.password), {headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then(
                //return $http.post('auth/login', $httpParamSerializer(credentials), {headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then(
                return $http.post('/auth/login', credentials).then(
                    function (response) {
                        socket.emit('join', response.data.email.split('@')[0]);
                        retryUnauthorizedRequests();
                        email = response.data.email;
                        name = response.data.fullname;
                        role = response.data.role;
                        return response.data;
                    }, function(reason) {
                        resetLogin();
                    });
                },
            "logout": function () {
                resetLogin();
                return $http.post('/auth/logout', {});
            },
            "isAuthenticated": function () {
                return !!name;
            },
            "isAuthorized": function (authorizedRoles) {
                if (!angular.isArray(authorizedRoles)) {
                    authorizedRoles = [authorizedRoles];
                }
                //return (this.isAuthenticated() && authorizedRoles.indexOf(Session.userRole) !== -1);
                return true;
            }
        };
    }]);

    angular.module('TheApp').controller('loginController', ['loginService', function (loginService) {
        var self = this;
        self.isLoggedIn = function() {
            return loginService.isAuthenticated();
        };
        self.username = 'Yousuf';
        self.password = 'hola';
        self.login = function (username, password) {
            loginService.login({username: username, password: password});
        };
        self.logout = function () {
            loginService.logout();
        };
        self.getYear = function() {
            return new Date().getFullYear();
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global console*/


(function (angular) {
    'use strict';

    angular.module('TheApp').factory('plansService', ['$http', function ($http) {
        var plans,
            planEdit,
            planSelected,
            agGridData;

        function getItem(holder, itemsName, itemName, createMissing) {
            var i, item;
            if (holder) {
                if (!holder[itemsName] && createMissing) {
                    holder[itemsName] = [];
                }
                if (holder[itemsName]) {
                    for (i = 0; i < holder[itemsName].length; i += 1) {
                        if (holder[itemsName][i].name === itemName) {
                            item = holder[itemsName][i];
                            break;
                        }
                    }
                }
                if (!item && createMissing) {
                    holder[itemsName].push({
                        "name": itemName
                    });
                    item = holder[itemsName][holder[itemsName].length - 1];
                }
            }
            return item;
        }

        function deletePlan(plan) {
            var level1, level2, level3, i;
            level1 = getItem(plans, "Level1", plan.level1Name);
            level2 = getItem(level1, "Level2", plan.level2Name);
            level3 = getItem(level2, "Level3", plan.level3Name);
            for (i = 0; i < level3.Plans.length; i += 1) {
                if (level3.Plans[i].name === plan.name) {
                    level3.Plans.splice(i, 1);
                    return i;
                }
            }
        }

        function getPlanFromPath(planPath) {
            var level1, level2, level3, plan;
            if (planPath[0]) {
                level1 = getItem(plans, "Level1", planPath[0]);
                if (planPath[1]) {
                    level2 = getItem(level1, "Level2", planPath[1]);
                    if (planPath[2]) {
                        level3 = getItem(level2, "Level3", planPath[2]);
                        if (planPath[3]) {
                            plan = getItem(level3, "Plans", planPath[3]);
                        }
                    }
                }
            }
            return plan;
        }

        function toAgGridNested(obj) {
            var result = [],
                sourceIsArray = false;
            if (angular.isArray(obj)) {
                obj = {
                    "array": obj
                };
                sourceIsArray = true;
            }
            (function iterate(obj, result, level) {
                var i, key, node = {
                    "data": {}
                };
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        if (obj[key] instanceof Array) {
                            if (key !== "Features") {
                                node.group = true;
                                node.expanded = level <= 4 ? true : false;
                                node.children = [];
                                for (i = 0; i < obj[key].length; i += 1) {
                                    iterate(obj[key][i], node.children, level + 1);
                                }
                            }
                        } else {
                            node.data[key] = obj[key];
                        }
                    }
                }
                node.data.level = level - 1;
                result.push(node);
            }(obj, result, 1));
            if (sourceIsArray) {
                result = result[0].children;
            }
            return result;
        }

        function load(path) {
            $http.get(path).then(function (response) {
                plans = response.data;
                agGridData = toAgGridNested(plans.Level1);
                console.log("Plans data was retrieved successfully.");
            }, function (response) {
                console.warn("Could not load plans data.", response);
            });
        }

        load('data/plans.json');

        return {
            "get": function () {
                return plans;
            },
            "getTitle": function () {
                return plans ? plans.name : "Plans";
            },
            "getAgGrid": function () {
                return agGridData;
            },
            "setRows": function (gridOptions) {
                $http.get('data/plans.json').then(function (response) {
                    gridOptions.api.setRowData(agGridData);
                }, function (response) {});
            },
            "getSelected": function () {
                return planSelected;
            },
            "select": function (planPath) {
                var plan = getPlanFromPath(planPath);
                if (plan) {
                    planSelected = angular.copy(plan);
                    planSelected.level1Name = planPath[0];
                    planSelected.level2Name = planPath[1];
                    planSelected.level3Name = planPath[2];
                }
            },
            "add": function (plan, planToReplace) {
                var insertIndex, level1, level2, level3;
                if (planToReplace) {
                    insertIndex = deletePlan(planToReplace);
                }
                if (!plan.Level1Name) {
                    plan.Level1Name = "General Level1";
                }
                level1 = getItem(plans, "Level1", plan.Level1Name, true);
                if (!plan.Level2Name) {
                    plan.Level2Name = "General Level2";
                }
                level2 = getItem(level1, "Level2", plan.Level2Name, true);
                if (!plan.Level3Name) {
                    plan.Level3Name = "General Level3";
                }
                level3 = getItem(level2, "Level3", plan.Level3Name, true);
                if (!level3.Plans) {
                    level3.Plans = [];
                }
                if (isNaN(insertIndex)) {
                    level3.Plans.push(plan);
                } else {
                    level3.Plans.splice(insertIndex, 0, plan);
                }
            },
            "remove": function (plan) {
                if (planEdit === plan) {
                    planEdit = undefined;
                }
                if (planSelected === plan) {
                    planSelected = undefined;
                }
                deletePlan(plan);
            }
        };
    }]);

    // define controller for plans
    angular.module('TheApp').controller('plansController', ['$scope', '$http', 'plansService', 'navigationService', function ($scope, $http, plansService, navigationService) {
        var self = this;
        self.isDocked = function (componentId) {
            return navigationService.isSidenavLocked(componentId);
        };
    }]);

    angular.module('TheApp').controller('plansController2', ['$scope', '$http', '$document', '$timeout', 'plansService', 'navigationService', function ($scope, $http, $document, $timeout, plansService, navigationService) {
        $scope.selectedPlan = 'Select a file below...';

        function getNodePath(node) {
            var path = [node.data.name];
            while (node.parent) {
                path.unshift(node.parent.data.name); // push element at beginning of array
                node = node.parent;
            }
            return path;
        }

        function rowClicked(params) {
            if (params.node.data.level === 4) {
                $scope.$apply(function () {
                    navigationService.showBusy(true);
                });
                $timeout(function () {
                    plansService.select(getNodePath(params.node));
                    $scope.$$postDigest(function () {
                        navigationService.showBusy(false);
                    });
                }, 100);
            }
            $scope.selectedPlan = params.node.data.name;
        }

        function innerCellRenderer(params) {
            var icon;
            switch (params.node.data.level) {
            case 1:
            case 2:
            case 3:
                icon = '<path style="fill:#ffc72c" d="m5.5058 1.9893c-0.22526 0-0.40667 0.18133-0.40667 0.40659v14.58c0 0.22526 0.18141 0.40658 0.40667 0.40658h12.323c0.22526 0 0.40658-0.18133 0.40658-0.40658v-14.58c0-0.22526-0.18133-0.40659-0.40658-0.40659z"/>' + '<path style="fill:#ffdb4c" d="m5.3648 2.1073 7.2607 3.5734c0.15488 0.076224 0.27894 0.32646 0.27894 0.56007v14.463c0 0.23362-0.12399 0.36135-0.27894 0.2833l-7.2612-3.658c-0.1549-0.078-0.2789-0.326-0.2789-0.56v-14.379c0-0.23362 0.12406-0.35952 0.27894-0.2833z"/>';
                break;
            case 4:
                icon = '<path style="fill:#ffffff" d="m5.9566 2.1294v16.374h11.873v-13.182l-3.1627-3.1921h-0.08224z"/>' + '<path style="fill:#587a72" d="m5.73 1.9027v16.842h12.326v-13.559l-3.2834-3.2834h-0.08538-8.9574zm0.4091 0.4091h8.2708v3.1892h3.2372v12.835h-11.508v-16.024zm8.6799 0.21522 2.5613 2.5631h-2.5613v-2.5631z"/>' + '<path style="fill:#587a72" d="m5.73 1.9027v16.842h12.326v-13.559l-3.2834-3.2834h-0.08538-8.9574zm0.4091 0.4091h8.2708v3.1892h3.2372v12.835h-11.508v-16.024zm8.6799 0.21522 2.5613 2.5631h-2.5613v-2.5631z"/>';
                break;
            case 5:
                icon = '<path style="fill:#587a72" d="m 4.7324219,5.265625 0,0.2890625 0,12.8222655 14.3574221,0 0,-13.111328 z m 0.5742187,2.4066804 13.2070314,0 0,10.1304286 -13.2070314,0 z" />';
                break;
            case 6:
                icon = '<path style="fill:#587a72" d="m 8.1392016,5.265625 0,0.2890625 0,12.8222655 7.5438624,0 0,-13.111328 z m 0.6067981,0.7795618 6.3800883,0 0,11.7575472 -6.3800883,0 z" />';
                break;
            default:
                icon = '<path style="fill:#587a72" r="6.4449153" cy="12" cx="12" />';
            }
            icon = '<svg style="width:24px;height:24px;vertical-align:middle">' + icon + '</svg> ';
            return icon + ' <span title="' + params.data.description + '">' + params.data.name + '</span>';
        }
        var self = this,
            columnDefs = [
                {
                    headerName: "Name",
                    field: "name",
                    width: 250,
                    cellRenderer: {
                        renderer: 'group',
                        innerRenderer: innerCellRenderer
                    }
                },
                {
                    headerName: "Level",
                    field: "level",
                    width: 50,
                    cellStyle: {
                        'text-align': 'left'
                    }
                }
            ];
        self.gridOptions = {
            columnDefs: columnDefs,
            rowSelection: 'multiple',
            rowsAlreadyGrouped: true,
            enableColResize: true,
            enableSorting: true,
            rowHeight: 20,
            rowStyle: [{
                color: 'red'
            }],
            icons: {
                groupContracted: '<i style="display:inline-block;width:10px;font-weight:bold">+</i>',
                groupExpanded: '<i style="display:inline-block;width:10px;font-weight:bold">−</i>'
            },
            onRowClicked: rowClicked
        };
        $document.ready(function () {
            console.log("document.ready()");
            plansService.setRows(self.gridOptions);
        });
        self.getTitle = function () {
            return plansService.getTitle();
        };
        
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global JSZip,JSZipUtils*/
/*global xml2json,json2xml*/
/*global saveAs*/
/*global console*/


(function (angular) {
    'use strict';

    angular.module('TheApp').factory('writerService', ['$http', 'assembleService', function ($http, assembleService) {
        var template;
        
        function transformModel(plan) {
            var transform = angular.copy(plan);
            transform.Contributors = [
                {name: "Yousuf", title: "Sr Manager", section: "Automation", department: "IT"},
                {name: "Roshan", title: "Sr Manager", section: "Wireless", department: "MKT"},
                {name: "Philip", title: "Manager", section: "Wireless", department: "MKT"}
            ];
            (function setTotals(obj) {
                angular.forEach(obj, function (val, key) {
                    if (angular.isArray(val)) {
                        obj['total' + key] = val.length;
                        var i;
                        for (i = 0; i < val.length; i += 1) {
                            setTotals(val[i]);
                        }
                    } else if (angular.isObject(val)) {
                        setTotals(val);
                    }
                });
            }(transform));
            transform.Definitions = [];
            transform.Bands.forEach(function (band) {
                band.Rules = [];
                band.Flavors.forEach(function (flavor) {
                    flavor.Features.forEach(function (feature) {
                        if (!feature._visited) {
                            var rule = {};
                            rule.name = assembleService.getFeatureName(feature);
                            rule.kind = assembleService.getFeatureKind(feature);
                            var matchedFeatures = [];
                            band.Flavors
                                .filter(function (fl) { return fl.name !== flavor.name; })
                                .forEach(function (fl) {
                                    matchedFeatures = fl.Features
                                        .filter(function(f) {
                                            return rule.name === assembleService.getFeatureName(f) && rule.kind === assembleService.getFeatureKind(f);
                                        })
                                        .map(function (f) {
                                            return {flavor: fl, feature: f};
                                        });
                                });
                            rule.Subrules = [];
                            angular.forEach(feature, function (val, key) {
                                if (key !== 'masterPath') {
                                    var Flavors = [], title = assembleService.getSubfeatureProp(feature, key, 'title');
                                    if (title) {
                                        Flavors.push({
                                            attribute: title,
                                            flavor: flavor.name,
                                            value: val
                                        });
                                        matchedFeatures.forEach(function (mfeature) {
                                            mfeature.feature._visited = true;
                                            if (mfeature.feature.hasOwnProperty(key)) {
                                                Flavors.push({
                                                    attribute: title,
                                                    flavor: mfeature.flavor.name,
                                                    value: mfeature.feature[key]
                                                });
                                            }
                                        });
                                        rule.Subrules.push({Flavors: Flavors});
                                        if (!transform.Definitions.filter(function (d) {return d.term === title;}).length) {
                                            transform.Definitions.push({
                                                term: title,
                                                description: assembleService.getSubfeatureProp(feature, key, 'definition')
                                            });
                                        }
                                    }
                                }
                            });
                            band.Rules.push(rule);
                        }
                    });
                });
            });
            return transform;
        }
        
        function fillPlaceholders(xml, model) {
            function findPlaceholders(node) {
                var i, placeholders = [];
                for (i = 0; i < node.children.length; i += 1) {
                    if (node.children[i].name === 'w:sdt') {
                        placeholders.push({parent: node, location: i});
                    } else if (node.children[i].children && node.children[i].children.length) {
                        placeholders = placeholders.concat(findPlaceholders(node.children[i]));
                    }
                }
                return placeholders;
            }
            function findNode(node, name) {
                if (!node) {
                    console.log('conditional breakpoint');
                }
                var i, deep;
                if (node.name === name) {
                    return node;
                }
                if (node.children && node.children.length) {
                    for (i = 0; i < node.children.length; i += 1) {
                        if ((deep = findNode(node.children[i], name)) !== undefined) {
                            return deep;
                        }
                    }
                }
            }
            var i, j, k, phName, children, placeholders = findPlaceholders(xml), parent, placeholder;
            for (i = 0; i < placeholders.length; i += 1) {
                parent = placeholders[i].parent;
                j = placeholders[i].location;
                placeholder = parent.children[j];
                phName = findNode(placeholder, 'w:alias').attributes['w:val'];
                if (phName && model.hasOwnProperty(phName)) {
                    /*if (phName === 'Contributors' || model[phName] === 'Charge Amount')
                        {console.log('conditional breakpoint');}*/
                    if (angular.isArray(model[phName])) {
                        children = [];
                        //j = parent.children.indexOf(placeholder);
                        /*for (j = 0; j <= parent.children.length; j += 1) {
                            if (angular.equals(placeholder, parent.children[j])) {
                                break;
                            }
                        }*/
                        /*if (j < 0)
                            {continue;}*/
                        for (k = 0; k <= j; k += 1) {
                            children.push(parent.children[k]);
                        }
                        for (k = 1; k < model[phName].length; k += 1) {
                            children.push(angular.copy(placeholder));
                        }
                        for (k = j + model[phName].length; k < parent.children.length; k += 1) {
                            children.push(parent.children[k]);
                        }
                        delete parent.children;
                        parent.children = children;
                        for (k = 0; k < model[phName].length; k += 1) {
                            fillPlaceholders(findNode(parent.children[j + k], 'w:sdtContent'), model[phName][k], phName);
                        }
                    } else {
                        findNode(placeholder, 'w:t').content = model[phName];
                    }
                } else {
                    console.warn("Could not find matching model for placeholder '" + phName + "'.");// + " Current model: \n", JSON.stringify(model, function (k, v) {return k === 'parent'? '_' : v;}));
                    findNode(placeholder, 'w:t').content = '';
                }
            }
        }
        
        //JSZipUtils.getBinaryContent('data/easy.docx', function (err, data) {
        JSZipUtils.getBinaryContent('data/brd-template.docx', function (err, data) {
            if (!err) {
                console.log("Word template document was retrieved successfully.");
                template = new JSZip(data);
                //console.log("Content of word/document.xml:\n" + docx.file("word/document.xml").asText());
            } else {
                console.error(err);
            }
        });
        
        return {
            "generate": function (plan) {
                if (!plan) {
                    return;
                }
                var docx = angular.copy(template), json, date = new Date().getFullYear().toString() + ('0' + (new Date().getMonth() + 1)).slice(-2) + ('0' + new Date().getDate()).slice(-2);
                json = xml2json(docx.file("word/document.xml").asText(), false);
                fillPlaceholders(json.root, transformModel(plan));
                docx.file("word/document.xml", json2xml(json));
                //console.log('Plan transformed to BRD structure:\n', JSON.stringify(json, function (k, v) {return k === 'parent'? '_' : v;}));
                saveAs(docx.generate({type: "blob"}), date + ' BRD - ' + plan.name + '.docx');
                //console.log(json2xml(xml2json(template.file("word/document.xml").asText())));
                //console.log(docx.file("word/document.xml").asText());
            }
        };
    }]);

    // define controller for writer
    angular.module('TheApp').controller('writerController', ['writerService', 'assembleService', function (writerService, assembleService) {

        this.check = function () {
        };
        this.getPlan = function () {
            return assembleService.getPlanEdit();
        };
        this.getMasterName = function (feature) {
            return feature.masterPath[2];
        };
        this.getTotalAttributes = function (feature) {
            var key, count = 0;
            for (key in feature) {
                if (feature.hasOwnProperty(key)) {
                    count += 1;
                }
            }
            return count;
        };
        this.generate = function () {
            //assembleService.select();
            writerService.generate(assembleService.getPlanEdit());
        };

    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global console*/


(function (angular) {
    'use strict';

    //
    angular.module('TheApp').factory('mastersService', ['$http', function ($http) {
        var masters,
            masterSelected,
            masterEdit;

        function getItem(holder, itemsName, itemName, createMissing) {
            var i, item;
            if (holder) {
                if (!holder[itemsName] && createMissing) {
                    holder[itemsName] = [];
                }
                if (holder[itemsName]) {
                    for (i = 0; i < holder[itemsName].length; i += 1) {
                        if (holder[itemsName][i].name === itemName) {
                            item = holder[itemsName][i];
                            break;
                        }
                    }
                }
                if (!item && createMissing) {
                    holder[itemsName].push({
                        "name": itemName
                    });
                    item = holder[itemsName][holder[itemsName].length - 1];
                }
            }
            return item;
        }

        function deleteMaster(master) {
            var group, collection, i;
            group = getItem(masters, "Groups", master.groupName);
            collection = getItem(group, "Collections", master.collectionName);
            if (collection) {
                for (i = 0; i < collection.Masters.length; i += 1) {
                    if (collection.Masters[i].name === master.name) {
                        collection.Masters.splice(i, 1);
                        return i;
                    }
                }
            }
        }

        function makeHierarchy(mastersGiven) {
            var masters = {}, m, i, j, r;
            mastersGiven.forEach(function (master) {
                 for (r = master.revisions.length - 1; r >=0; r -= 1) {
                    if (master.revisions[r].show === true) {
                       if (!masters.Groups) {
                            masters.Groups = [];
                        }
                        for (i = 0; i < masters.Groups.length; i += 1) {
                            if (masters.Groups[i].name === master.groupName) {
                                break;
                            }
                        }
                        if (i === masters.Groups.length) {
                            masters.Groups.push({name: master.groupName});
                            i = masters.Groups.length - 1;
                        }
                        if (!masters.Groups[i].Collections) {
                            masters.Groups[i].Collections = [];
                        }
                        for (j = 0; j < masters.Groups[i].Collections.length; j += 1) {
                            if (masters.Groups[i].Collections[j].name === master.collectionName) {
                                break;
                            }
                        }
                        if (j === masters.Groups[i].Collections.length) {
                            masters.Groups[i].Collections.push({name: master.collectionName});
                            j = masters.Groups[i].Collections.length - 1;
                        }
                        if (!masters.Groups[i].Collections[j].Masters) {
                            masters.Groups[i].Collections[j].Masters = [];
                        }
                        m = {};
                        m.name = master.name;
                        m.collectionName = master.collectionName;
                        m.groupName = master.groupName;
                        angular.forEach(master.revisions[r], function(val, key) {
                            m[key] = val;
                        });
                        masters.Groups[i].Collections[j].Masters.push(m);
                        break;
                    }
                }
            });
            return masters;
        }
        
        /*function addParentNames(masters) {
            var mas = [], m, rev;
            masters.Groups.forEach(function (group) {
                group.Collections.forEach(function (collection) {
                    collection.Masters.forEach(function (master) {
                        m = {};
                        m.name = master.name;
                        m.collectionName = collection.name;
                        m.groupName = group.name;
                        m.revisions = [];
                        rev = {};
                        rev.ver = 1;
                        rev.by = 'yalmarzooqi';
                        rev.when = '2016-03-22T11:11:11.111Z';
                        rev.description = master.description || '';
                        rev.icon = master.icon || '';
                        rev.value = master.value;
                        rev.kind = master.kind;
                        rev.show = true;
                        rev.Attributes = {};
                        rev.Attributes.schema = angular.copy(master.Attributes.$schema);
                        delete master.Attributes.$schema;
                        angular.forEach(master.Attributes, function (val, key) {
                            rev.Attributes[key] = val;
                        });
                        m.revisions.push(rev);
                        mas.push(m);
                    });
                });
            });
            console.log(JSON.stringify(mas));
            //removeParentNames(masters); console.log(JSON.stringify(masters));
        }*/

        function removeParentNames(masters) {
            masters.Groups.forEach(function (group) {
                group.Collections.forEach(function (collection) {
                    collection.Masters.forEach(function (master) {
                        delete master.groupName;
                        delete master.collectionName;
                    });
                });
            });
        }

        function getMasterFromPath(masterPath) {
            var group, collection, master;
            if (masterPath[0]) {
                group = getItem(masters, "Groups", masterPath[0]);
                if (masterPath[1]) {
                    collection = getItem(group, "Collections", masterPath[1]);
                    if (masterPath[2]) {
                        master = getItem(collection, "Masters", masterPath[2]);
                    }
                }
            }
            return master;
        }

        /*(function load(path) {
            $http.get(path).then(function (response) {
                masters = response.data;
                addParentNames(masters);
                console.log("Masters data was retrieved successfully.");
            }, function (response) {
                console.warn("Could not load masters data.", response);
            });
        }('data/masters.json'));*/
        (function load(path) {
            $http.get(path).then(function (response) {
                masters = makeHierarchy(response.data);
                console.log("Masters data was retrieved successfully.");
            }, function (response) {
                console.warn("Could not load masters data.", response);
            });
        }('api/masters'));

        return {
            "get": function () {
                return masters;
            },
            "getMasterFromPath": function (masterPath) {
                return getMasterFromPath(masterPath);
            },
            "getSelected": function () {
                return masterSelected;
            },
            "select": function (groupName, collectionName, master) {
                masterSelected = angular.copy(master);
                masterSelected.groupName = groupName;
                masterSelected.collectionName = collectionName;
            },
            "add": function (master, masterToReplace) {
                var insertIndex, group, collection;
                if (masterToReplace) {
                    insertIndex = deleteMaster(masterToReplace);
                }
                if (!master.groupName) {
                    master.groupName = "General";
                }
                group = getItem(masters, "Groups", master.groupName, true);
                if (!master.collectionName) {
                    master.collectionName = "General";
                }
                collection = getItem(group, "Collections", master.collectionName, true);
                if (!collection.Masters) {
                    collection.Masters = [];
                }
                if (isNaN(insertIndex)) {
                    collection.Masters.push(master);
                } else {
                    collection.Masters.splice(insertIndex, 0, master);
                }
            },
            "remove": function (master) {
                if (masterEdit === master) {
                    masterEdit = undefined;
                }
                if (masterSelected === master) {
                    masterSelected = undefined;
                }
                deleteMaster(master);
            }
        };
    }]);

    // define controller for masters
    angular.module('TheApp').controller('mastersController', ['mastersService', 'propertiesService', 'navigationService', function (mastersService, propertiesService, navigationService) {
        var self = this;
        self.isDocked = function (componentId) {
            return navigationService.isSidenavLocked(componentId);
        };
        self.getGroups = function () {
            return mastersService.get() ? mastersService.get().Groups : null;
        };
        self.selectMaster = function (groupName, collectionName, master) {
            // track selected master
            mastersService.select(groupName, collectionName, master);
            // show attributes of master
            propertiesService.manage(master.Attributes);
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/


(function (angular) {
    'use strict';

    // define controller for actions
    angular.module('TheApp').controller('actionsController', ['$scope', '$mdSidenav', '$mdBottomSheet', '$q', function ($scope, $mdSidenav, $mdBottomSheet, $q) {

        this.toggleSidenav = function (componentId) {
            var pending = $mdBottomSheet.hide() || $q.when(true);

            pending.then(function () {
                $mdSidenav(componentId).toggle();
            });
        };

        $scope.$on('$locationChangeStart', function (e, nextURL, currentURL) {
            $scope.page = nextURL.split('/').splice(-1);
            $scope.styleUrl = 'demo/' + $scope.page + '/style.css';
        });

        /*// Show the bottom sheet  
        this.showActions = function ($event) {
            var user = "$scope.selected";
            // Bottom Sheet controller  
            function ContactPanelController($mdBottomSheet) {
                this.user = user;
                this.submitContact = function (action) {
                    $mdBottomSheet.hide(action);
                };
            }
            return $mdBottomSheet.show({
                parent: angular.element(document.getElementById('content')),
                templateUrl: 'actions-part/actions-view.html',
                controller: ['$mdBottomSheet', ContactPanelController],
                controllerAs: 'cp',
                bindToController: true,
                targetEvent: $event
            }).then(function (clickedItem) {
                //clickedItem && $log.debug(clickedItem.name + ' clicked!');
            });
        };*/

    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global console*/


(function (angular) {
    'use strict';

    // define service for assemble
    angular.module('TheApp').factory('assembleService', ['$http', '$filter', '$mdBottomSheet', 'mastersService', 'plansService', function ($http, $filter, $mdBottomSheet, mastersService, plansService) {
        var planEdit,
            planEditOriginal,
            toggleEditSelectedPlan = true;

        function isSamePlan(planA, planB) {
            return planA && planB && planA.name === planB.name && planA.collectionName === planB.collectionName && planA.groupName === planB.groupName;
        }

        function getMaster(feature) {
            return mastersService.getMasterFromPath(feature.masterPath);
        }

        return {
            "getPlanEdit": function () {
                var planSelected = plansService.getSelected();
                if (planSelected && !isSamePlan(planSelected, planEdit) && toggleEditSelectedPlan && !this.isPlanDirty()) { // if (!angular.equals(planEdit, plansService.getSelected())) {
                    this.setPlanEdit(planSelected);
                }
                return planEdit;
            },
            "setPlanEdit": function (plan) {
                planEdit = angular.copy(plan);
                planEditOriginal = angular.copy(planEdit);
            },
            "revertPlanEdit": function () {
                planEdit = angular.copy(planEditOriginal);
            },
            "savePlanEdit": function (replaceOriginal) {
                var planSave = angular.copy(planEdit);
                delete planSave.reference;
                angular.forEach(planSave.Attributes.properties, function (property, key) {
                    if (property.mandatory && planSave.Attributes.required.indexOf(key) < 0) {
                        if (!planSave.Attributes.required) {
                            planSave.Attributes.required = [];
                        }
                        planSave.Attributes.required.push(key);
                    }
                    delete property.mandatory;
                });
                plansService.add(planSave, replaceOriginal ? planEditOriginal : undefined);
                planEditOriginal = angular.copy(planEdit);
            },
            "isPlanDirty": function () {
                return !angular.equals(planEdit, planEditOriginal);
            },
            "deletePlan": function () {
                plansService.remove(planEdit);
                planEdit = null;
                planEditOriginal = null;
            },
            "getFeatureName": function (feature) {
                var master = getMaster(feature);
                return master ? master.name : "";
            },
            "getFeatureKind": function (feature) {
                var master = getMaster(feature), result = "";
                if (master && master.kind) {
                    master.kind.forEach(function (kind) {
                        if (feature[kind] !== undefined) {
                            result += (result === "" ? "" : ", ") + feature[kind];
                        }
                    });
                }
                return result;
            },
            "getFeatureValue": function (feature) {
                var result = "", master = getMaster(feature);
                if (master && master.value) {
                    master.value.forEach(function (value) {
                        try {
                            switch (master.Attributes.properties[value].type) {
                            case 'number':
                                switch (master.Attributes.properties[value].format) {
                                case 'currency':
                                    result += $filter('currency')(feature[value], "AED ", 2);
                                    break;
                                default:
                                    result += $filter('number')(feature[value]);
                                }
                                break;
                            default:
                                result += (result === "" ? "" : " ") + feature[value];
                            }
                        } catch (e) {
                            console.info(value, master.name, master.Attributes.properties);
                        }
                    });
                }
                return result;
            },
            "getFeatureIcon":  function (feature) {
                var master = getMaster(feature);
                return master ? master.icon : "";
            },
            "getSubfeatureProp":  function (feature, subfeatureProp, subfeatureSchemaProp) {
                var master = getMaster(feature), subfeature;
                if (master) {
                    subfeature = master.Attributes.properties[subfeatureProp];
                    if (subfeature) {
                        return subfeature[subfeatureSchemaProp];
                    }
                }
                return "";
            }
        };
    }]);

    // define controller for assemble
    angular.module('TheApp').controller('assembleController', ['$scope', '$mdDialog', 'assembleService', 'schemasService', 'propertiesService', 'mastersService', function ($scope, $mdDialog, assembleService, schemasService, propertiesService, mastersService) {

        //
        var self = this,
            originatorEv;
        self.openMenu = function ($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        };
        self.redial = function () {
            $mdDialog.show(
                $mdDialog.alert()
                    .targetEvent(originatorEv)
                    .clickOutsideToClose(true)
                    .parent('body')
                    .title('Suddenly, a redial')
                    .textContent('You just called a friend; who told you the most amazing story. Have a cookie!')
                    .ok('That was easy')
            );
            originatorEv = null;
        };
        self.autoEditSelectedPlan = false;
        self.editSelectedPlan = function (toggle) {
            assembleService.editSelectedPlan(toggle);
        };
        self.getPlan = function () {
            return assembleService.getPlanEdit();
        };
        self.selectPlan = function () {
            self.editPlan(assembleService.getPlanEdit());
        };
        self.editPlan = function (plan) {
            propertiesService.manage(schemasService.schema('plan'), plan, ["Attributes"]); //window.alert(JSON.stringify(propertiesService.get()));
        };
        self.newPlan = function (ev) {
            var confirm, planNew;
            if (assembleService.isPlanDirty()) {
                confirm = $mdDialog.confirm()
                    .title('Save Plan Changes?')
                    .textContent('Do you want to save changes made to "' + assembleService.getPlanEdit().name + '" plan?')
                    .ariaLabel('Save Plan Changes')
                    .targetEvent(ev)
                    .ok('Save')
                    .cancel('Discard');
                $mdDialog.show(confirm).then(function () {
                    self.savePlan(ev);
                }, function () {});
            }
            self.autoEditSelectedPlan = false;
            assembleService.editSelectedPlan(self.autoEditSelectedPlan);
            planNew = schemasService.fresh('plan');
            planNew.name = "New Plan";
            assembleService.setPlanEdit(planNew);
            self.editPlan(assembleService.getPlanEdit());
        };
        self.revertPlan = function () {
            assembleService.revertPlanEdit();
        };
        self.savePlan = function (ev) {
            var confirm = $mdDialog.confirm()
                .title('Modify Existing Plan?')
                .textContent('Do you want to modify existing plan or create new one?')
                .ariaLabel('Modify Existing Plan')
                .targetEvent(ev)
                .ok('Modify Existing')
                .cancel('Create New');
            $mdDialog.show(confirm).then(function () {
                assembleService.savePlanEdit(true);
            }, function () {
                assembleService.savePlanEdit(false);
            });
        };

        self.planActive = null;
        self.bandActive = null;
        self.flavorActive = null;
        self.featureActive = null;
        self.attributeActive = null;
        self.planCopied = null;
        self.bandCopied = null;
        self.flavorCopied = null;
        self.featureCopied = null;
        self.attributeCopied = null;
        self.copy = function (object) {
            return angular.copy(object);
        };
        //
        self.getPlan = function () {
            //window.alert("getPlan() called");
            return assembleService.getPlanEdit();
        };
        self.editPlan = function (plan) {
            propertiesService.manage(schemasService.schema('plan'), plan, ["Bands"]);
        };
        self.activatePlan = function (plan) {
            self.planActive = plan;
            self.editPlan(plan);
        };
        self.loadPlan = function () {
            assembleService.loadPlan('data/plan-A.json');
        };
        self.savePlan = function (plan) {
            return true;
        };
        self.addBand = function (plan) {
            if (!plan) {
                self.newPlan();
                plan = self.getPlan();
            }
            var band = schemasService.fresh('band');
            band.name = "New Band";
            band.description = "Description for the new band";
            plan.Bands.push(band);
            self.editBand(band);
            return band;
        };
        self.editBand = function (band) {
            propertiesService.manage(schemasService.schema('band'), band, ["Flavors"]);
        };
        self.activateBand = function (band) {
            self.bandActive = band;
            self.editBand(band);
        };
        self.addFlavor = function (band) {
            if (!band) {
                band = self.addBand();
            }
            var flavor = schemasService.fresh('flavor');
            flavor.name = "New Flavor";
            flavor.description = "Description for the new flavor";
            band.Flavors.push(flavor);
            self.editFlavor(flavor);
            return flavor;
        };
        self.editFlavor = function (flavor) {
            propertiesService.manage(schemasService.schema('flavor'), flavor, ["Features"]);
        };
        self.activateFlavor = function (flavor) {
            self.flavorActive = flavor;
            self.editFlavor(flavor);
        };
        self.editFeature = function (feature) {
            var master = mastersService.getMasterFromPath(feature.masterPath);
            propertiesService.manage(master.Attributes, feature, ["Attributes"]);
        };
        self.activateFeature = function (feature) {
            self.featureActive = feature;
            self.editFeature(feature);
        };
        self.getFeatureName = function (feature) {
            return assembleService.getFeatureName(feature);
        };
        self.getFeatureKind = function (feature) {
            return assembleService.getFeatureKind(feature);
        };
        self.getFeatureValue = function (feature) {
            return assembleService.getFeatureValue(feature);
        };
        self.getFeatureIcon = function (feature) {
            return assembleService.getFeatureIcon(feature);
        };
        self.IsFeatureRedundant = function (feature, index, flavor) {
            var i, j, mast, master = mastersService.getMasterFromPath(feature.masterPath);
            for (i = 0; i < flavor.Features.length; i += 1) {
                if (i !== index) {
                    mast = mastersService.getMasterFromPath(flavor.Features[i].masterPath);
                    if (mast && mast.name === master.name) {
                        for (j = 0; j < mast.kind.length; j += 1) {
                            if (flavor.Features[i][mast.kind[j]] !== feature[master.kind[j]]) {
                                return false;
                            }
                        }
                        return true;
                    }
                }
            }
            return false;
        };
        //
        self.dropIntoFlavor = function (event, index, item, external, type, allowedTypes) {
            //console.log(JSON.stringify(event) + '\n' + JSON.stringify(index) + '\n' + JSON.stringify(item) + '\n' + JSON.stringify(external) + '\n' + JSON.stringify(type) + '\n' + JSON.stringify(allowedType));
            if (type === "feature") {
                return item;
            } else { // type === "master"
                var master = item, feature = {};
                feature.masterPath = [master.groupName, master.collectionName, master.name];
                return feature;
            }
        };

    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/


(function (angular) {
    'use strict';

    // define controller for navigation
    angular.module('TheApp').factory('navigationService', ['manufactureService', 'assembleService', '$location', function (manufactureService, assembleService, $location) {
        var busy = false,
            lockedSidenav = {
                "plans": true,
                "masters": false,
                "properties": true
            };
        return {
            "getTitle": function () {
                var active;
                switch ($location.path()) {
                case '/manufacture':
                    active = manufactureService.getMasterEdit();
                    return active ? active.name : "Manufacture Mode";
                case '/assemble':
                    active = assembleService.getPlanEdit();
                    return active ? active.name : "Design Mode";
                case '/international':
                    active = assembleService.getPlanEdit();
                    return active ? active.name : "World Map";
                default:
                    return "Telecom Designer";
                }
            },
            "toggleSidenavLock": function (componentId) {
                lockedSidenav[componentId] = !lockedSidenav[componentId];
            },
            "isSidenavLocked": function (componentId) {
                return lockedSidenav[componentId];
            },
            "showBusy": function (toggle) {
                busy = toggle;
            },
            "isBusy": function () {
                return busy;
            }
        };
    }]);

    // define controller for navigation
    angular.module('TheApp').controller('navigationController', ['navigationService', 'loginService', '$scope', '$mdSidenav', '$mdBottomSheet', '$q', '$mdMedia', '$location', '$mdDialog', function (navigationService, loginService, $scope, $mdSidenav, $mdBottomSheet, $q, $mdMedia, $location, $mdDialog) {
        var self = this;
        self.getUserName = function () {
            return loginService.getName();
        };
        self.getUserRole = function () {
            return loginService.getRole();
        };
        self.getTitle = function () {
            return navigationService.getTitle();
        };
        self.findCreatedPlans = function (ev) {
        };
        self.findEditedPlans = function (ev) {
        };
        self.logout = function (ev) {
            loginService.logout();
        };
        self.toggleSidenav = function (componentId) {
            if ($mdMedia('gt-sm') && componentId === "properties") {
                navigationService.toggleSidenavLock(componentId);
            } else if ($mdMedia('gt-md')) {
                navigationService.toggleSidenavLock(componentId);
            } else {
                var pending = $mdBottomSheet.hide() || $q.when(true);
                pending.then(function () {
                    $mdSidenav(componentId).toggle();
                });
            }
        };
        self.isOpenSidenav = function (componentId) {
            return $mdSidenav(componentId).isOpen();
        };
        $scope.$on('$locationChangeStart', function (e, nextURL, currentURL) {
            $scope.page = nextURL.split('/').splice(-1);
            $scope.styleUrl = 'demo/' + $scope.page + '/style.css';
        });
        self.changeMode = function () {
            var paths = ['manufacture', 'assemble', 'international'],
                index = paths.indexOf($location.path().substring(1));
            $location.path(paths[(index + 1) % paths.length]);
        };
        self.isBusy = function () {
            return navigationService.isBusy();
        };
        $scope.rowsPerPage = 100;
        self.showSettings = function (ev) {
            $mdDialog.show({
                controller: function ($scope, $mdDialog, rowsPerPage) {
                    $scope.rowsPerPage = rowsPerPage;
                    $scope.ok = function(settings) {
                        $mdDialog.hide(settings);
                    };
                    $scope.cancel = function() {
                        $mdDialog.hide();
                    };
                },
                templateUrl: 'user-settings.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: { rowsPerPage: $scope.rowsPerPage },
                /*preserveScope: true,*/
                clickOutsideToClose: true,
                fullscreen: $mdMedia('sm')
            }).then(function (settings) {
                $scope.rowsPerPage = settings.rowsPerPage;
                console.log('Dialog closed with "' + settings + '".');
            }, function () {
                console.log('Dialog closed.');
            });
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global console*/


(function (angular) {
    'use strict';

    // define service for properties
    angular.module('TheApp').factory('propertiesService', function () {
        var properties = null,
            valuesSaved = null,
            valuesTracked = null,
            ignoreProperties = "";

        function saveValues() {
            valuesSaved = angular.copy(valuesTracked);
            if (valuesSaved) {
                ignoreProperties.forEach(function (ignoreProperty) {
                    if (valuesSaved.hasOwnProperty(ignoreProperty)) {
                        delete valuesSaved[ignoreProperty];
                    }
                    if (properties.properties.hasOwnProperty(ignoreProperty)) {
                        delete properties.properties[ignoreProperty];
                    }
                });
                angular.forEach(properties.properties, function (property, key) {
                    if (!valuesSaved.hasOwnProperty(key)) {
                        valuesSaved[key] = null;
                    }
                });
            }
        }

        return {
            "manage": function (schema, values, ignoreObjectProperties) {
                if (!schema) {
                    console.error("schema not provided");
                    return;
                }
                if (values && values === valuesTracked) {
                    return;
                }
                properties = angular.copy(schema);
                valuesTracked = values;
                ignoreProperties = ignoreObjectProperties;
                saveValues();
                if (properties.required) {
                    properties.required.forEach(function (required) {
                        if (properties.properties[required]) {
                            properties.properties[required].mandatory = true;
                        }
                    });
                }
                angular.forEach(properties.properties, function (property, key) {
                    if (valuesSaved && valuesSaved.hasOwnProperty(key) && valuesSaved[key] !== null) {
                        property.value = angular.copy(valuesSaved[key]);
                    } else if (property.hasOwnProperty('default')) {
                        property.value = angular.copy(property['default']);
                    } else {
                        switch (property.type) {
                        case "string":
                            property.value = "";
                            break;
                        case "number":
                            if (property.minimum) {
                                property.value = property.minimum;
                            } else {
                                property.value = 0;
                            }
                            break;
                        case "boolean":
                            property.value = false;
                            break;
                        case "array":
                            property.value = [];
                            break;
                        case "object":
                            property.value = {};
                            break;
                        default:
                            property.value = null;
                        }
                    }
                    if (property.value instanceof Array && property.format.indexOf('array-') >= 0) {
                        property.options = property.options || [];
                        property.options = property.options.concat(property.value.filter(function (item) {
                            return property.options.indexOf(item) < 0;
                        }));
                    }
                });
            },
            "get": function () {
                return properties;
            },
            "update": function () {
                angular.forEach(properties.properties, function (property, key) {
                    if (valuesSaved.hasOwnProperty(key)) {
                        valuesTracked[key] = angular.copy(property.value);
                    }
                    if (properties.title === 'Attribute') {
                        if (key === 'enum' && property.value && property.value.length === 0) {
                            delete valuesTracked[key];
                        }
                    }
                });
                saveValues();
            },
            "revert": function () {
                angular.forEach(properties.properties, function (property, key) {
                    if (valuesSaved.hasOwnProperty(key)) {
                        property.value = valuesSaved[key];
                    }
                });
            },
            "isDirty": function () {
                if (valuesTracked === undefined) {
                    return false;
                }
                var key;
                for (key in valuesSaved) {
                    if (valuesSaved.hasOwnProperty(key) && properties.properties.hasOwnProperty(key)) {
                        if (!angular.equals(properties.properties[key].value, valuesSaved[key])) {
                            return true;
                        }
                    }
                }
                return false;
            },
            "isDisabled": function () {
                return valuesTracked === undefined;
            },
            "check": function () {
                window.alert(JSON.stringify(valuesTracked));
            }
        };
    });

    // define controller for properties
    angular.module('TheApp').controller('propertiesController', ['navigationService', 'propertiesService', 'mastersService', function (navigationService, propertiesService, mastersService) {
        var self = this;
        self.isDocked = function (componentId) {
            return navigationService.isSidenavLocked(componentId);
        };
        self.updateValues = function (ev) {
            propertiesService.update();
        };
        self.submittable = function (form) {
            //console.log(JSON.stringify(form));
            angular.forEach(form, function (input) {

            });
            return true;
        };
        self.isPropertiesDirty = function () {
            return propertiesService.isDirty();
        };
        self.isPropertiesDisabled = function () {
            return propertiesService.isDisabled();
        };
        self.revertValues = function (ev) {
            propertiesService.revert();
        };
        self.check = function () {
            propertiesService.check();
        };
        self.getProperties = function () {
            return propertiesService.get();
        };
        self.jsonToText = function (obj) {
            return JSON.stringify(obj);
        };
        self.makeJson = function (text) {
            try {
                var obj = JSON.parse(text);
                if (obj && typeof obj === "object") {
                    return obj;
                }
            } catch (e) {}
            return null;
        };
        self.isValidDependencies = function (property) {
            var i, key, properties, orValues;
            function checkDependentValue(dependentName, dependentValue) {
                if (dependentValue.charAt(0) === "!") {
                    return dependentName.value !== dependentValue.slice(1);
                } else {
                    return dependentName.value === dependentValue;
                }
            }
            if (property && property.dependents) {
                properties = propertiesService.get().properties;
                for (key in property.dependents) {
                    if (property.dependents.hasOwnProperty(key)) {
                        if (property.dependents[key] instanceof Array) {
                            orValues = false;
                            for (i = 0; i < property.dependents[key].length; i += 1) {
                                orValues = orValues || checkDependentValue(properties[key], property.dependents[key][i]);
                            }
                            if (orValues === false) {
                                return false;
                            }
                        } else {
                            if (!checkDependentValue(properties[key], property.dependents[key])) {
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/



(function (angular) {
    'use strict';

    // define service for manufacture
    angular.module('TheApp').factory('manufactureService', ['mastersService', function (mastersService) {
        var masterEdit,
            masterEditOriginal,
            toggleEditSelectedMaster = false;

        function toCamelCase(s) {
            // remove chars that should not be in the beginning of the variable
            s = s.replace(/([^a-zA-Z0-9_\- ])|^[_0-9]+/g, "").trim().toLowerCase();
            // uppercase letters preceeded by a hyphen or a space
            s = s.replace(/([ \-]+)([a-zA-Z0-9])/g, function (a, b, c) {
                return c.toUpperCase();
            });
            // uppercase letters following numbers
            s = s.replace(/([0-9]+)([a-zA-Z])/g, function (a, b, c) {
                return b + c.toUpperCase();
            });
            return s;
        }

        function propertiesToItems(master) {
            master.Attributes.items = [];
            var key;
            for (key in master.Attributes.properties) {
                if (master.Attributes.properties.hasOwnProperty(key)) {
                    master.Attributes.items.push(master.Attributes.properties[key]);
                }
            }
            master.Attributes.type = "array";
            delete master.Attributes.properties;
            return master;
        }

        function itemsToProperties(master) {
            master.Attributes.properties = {};
            var i, key;
            for (i = 0; i < master.Attributes.items.length; i += 1) {
                key = toCamelCase(master.Attributes.items[i].title);
                master.Attributes.properties[key] = master.Attributes.items[i];
                master.Attributes.properties[key].sortKey = i + 1;
            }
            master.Attributes.type = "object";
            delete master.Attributes.items;
            return master;
        }

        function isSameMaster(masterA, masterB) {
            return masterA && masterB && masterA.name === masterB.name && masterA.collectionName === masterB.collectionName && masterA.groupName === masterB.groupName;
        }

        return {
            "getMasterEdit": function () {
                var masterSelected = mastersService.getSelected();
                if (masterSelected && !isSameMaster(masterSelected, masterEdit) && toggleEditSelectedMaster && !this.isMasterDirty()) { // if (!angular.equals(masterEdit, mastersService.getSelected())) {
                    this.setMasterEdit(masterSelected);
                }
                return masterEdit;
            },
            "setMasterEdit": function (master) {
                masterEdit = angular.copy(master);
                propertiesToItems(masterEdit);
                masterEditOriginal = angular.copy(masterEdit);
            },
            "revertMasterEdit": function () {
                masterEdit = angular.copy(masterEditOriginal);
            },
            "saveMasterEdit": function (replaceOriginal) {
                var masterSave = angular.copy(masterEdit);
                itemsToProperties(masterSave);
                delete masterSave.reference;
                angular.forEach(masterSave.Attributes.properties, function (property, key) {
                    if (property.mandatory && masterSave.Attributes.required.indexOf(key) < 0) {
                        if (!masterSave.Attributes.required) {
                            masterSave.Attributes.required = [];
                        }
                        masterSave.Attributes.required.push(key);
                    }
                    delete property.mandatory;
                });
                mastersService.add(masterSave, replaceOriginal ? masterEditOriginal : undefined);
                masterEditOriginal = angular.copy(masterEdit);
            },
            "isMasterDirty": function () {
                return !angular.equals(masterEdit, masterEditOriginal);
            },
            "deleteMaster": function () {
                mastersService.remove(masterEdit);
                masterEdit = null;
                masterEditOriginal = null;
            },
            "editSelectedMaster": function (toggle) {
                toggleEditSelectedMaster = toggle;
            }
        };
    }]);

    // define controller for navigation
    angular.module('TheApp').controller('manufactureController', ['$mdDialog', 'manufactureService', 'schemasService', 'propertiesService', function ($mdDialog, manufactureService, schemasService, propertiesService) {
        // manual watch a model
        /*$scope.$watch('models', function (model) {
            $scope.modelAsJson = angular.toJson(model, true);
        }, true);*/
        var self = this;
        self.autoEditSelectedMaster = false;
        self.editSelectedMaster = function (toggle) {
            manufactureService.editSelectedMaster(toggle);
        };
        self.getEditMaster = function () {
            return manufactureService.getMasterEdit();
        };
        self.selectMaster = function () {
            self.editMaster(manufactureService.getMasterEdit());
        };
        self.editMaster = function (master) {
            propertiesService.manage(schemasService.schema('master'), master, ["Attributes"]); //window.alert(JSON.stringify(propertiesService.get()));
        };
        self.newMaster = function (ev) {
            var confirm, masterNew;
            if (manufactureService.isMasterDirty()) {
                confirm = $mdDialog.confirm()
                    .title('Save Master Changes?')
                    .textContent('Do you want to save changes made to "' + manufactureService.getMasterEdit().name + '" master?')
                    .ariaLabel('Save Master Changes')
                    .targetEvent(ev)
                    .ok('Save')
                    .cancel('Discard');
                $mdDialog.show(confirm).then(function () {
                    self.saveMaster(ev);
                }, function () {});
            }
            self.autoEditSelectedMaster = false;
            manufactureService.editSelectedMaster(self.autoEditSelectedMaster);
            masterNew = schemasService.fresh('master');
            masterNew.Attributes.properties = {
                "attribute": schemasService.fresh('attribute')
            };
            manufactureService.setMasterEdit(masterNew);
            self.editMaster(manufactureService.getMasterEdit());
        };
        self.newMaster();
        self.revertMaster = function () {
            manufactureService.revertMasterEdit();
        };
        self.saveMaster = function (ev) {
            var confirm = $mdDialog.confirm()
                .title('Modify Existing Master?')
                .textContent('Do you want to modify existing master or create new one?')
                .ariaLabel('Modify Existing Master')
                .targetEvent(ev)
                .ok('Modify Existing')
                .cancel('Create New');
            $mdDialog.show(confirm).then(function () {
                manufactureService.saveMasterEdit(true);
            }, function () {
                manufactureService.saveMasterEdit(false);
            });
        };
        self.addAttribute = function () {
            var attribute = schemasService.fresh('attribute');
            manufactureService.getMasterEdit().Attributes.items.push(attribute);
            self.editAttribute(attribute);
        };
        self.editAttribute = function (attribute) {
            propertiesService.manage(schemasService.schema('attribute'), attribute, ["value", "sortKey"]); //window.alert(JSON.stringify(propertiesService.get()));
        };
        self.isMasterDirty = function () {
            return manufactureService.isMasterDirty();
        };
        self.isEditingMaster = function () {
            return true; // self.masterEdit !== null;
        };
        self.deleteMaster = function (ev) {
            var confirm = $mdDialog.confirm()
                .title('Delete Master?')
                .textContent('Are you sure you want to delete "' + manufactureService.getMasterEdit().name + '" master?')
                .ariaLabel('Delete Master')
                .targetEvent(ev)
                .ok('Delete')
                .cancel('Cancel');
            $mdDialog.show(confirm).then(function () {
                manufactureService.deleteMaster();
            }, function () {});
        };
        self.deleteAttribute = function (ev, attribute, index) {
            var confirm = $mdDialog.confirm()
                .title('Delete Attribute?')
                .textContent('Are you sure you want to delete "' + attribute.title + '" attribute?')
                .ariaLabel('Delete Attribute')
                .targetEvent(ev)
                .ok('Delete')
                .cancel('Cancel');
            $mdDialog.show(confirm).then(function () {
                manufactureService.getMasterEdit().Attributes.items.splice(index, 1);
            }, function () {});
        };
    }]);

}(window.angular));
// silence JSLint error: variable used before it was defined
/*global angular*/
/*global console*/


(function (angular) {
    'use strict';

    angular.module('TheApp').factory('internationalService', ['$http', function ($http) {
        var countries;

        function load(path) {
            $http.get(path).then(function (response) {
                countries = response.data;
                console.log("Countries data was retrieved successfully.");
            }, function (response) {
                console.warn("Could not load countries data.", response);
            });
        }

        load("data/countries.json");

        return {
            "get": function () {
                return countries;
            }
        };
    }]);

    angular.module('TheApp').directive('svgMap', ['$compile', function ($compile) {
        return {
            restrict: 'A',
            templateUrl: 'icons/world-map.svg',
            link: function (scope, element, attrs) {
                var countries = element[0].querySelectorAll('.country');
                angular.forEach(countries, function (path, key) {
                    var countryElement = angular.element(path);
                    countryElement.attr("country", "");
                    countryElement.attr("dummy-data", "getCountries");
                    countryElement.attr("hover-country", "hoverCountry");
                    $compile(countryElement)(scope);
                });
            }
        };
    }]);

    angular.module('TheApp').directive('country', ['$compile', function ($compile) {
        return {
            restrict: 'A',
            scope: {
                getCountries: "&",
                hoverCountry: "="
            },
            link: function (scope, element, attrs) {
                scope.elementId = element.attr("id");
                element.attr("ng-mouseover", "countryMouseOver()");
                scope.countryMouseOver = function () {
                    scope.hoverCountry = scope.elementId;
                    element[0].parentNode.appendChild(element[0]);
                };
                element.attr("ng-click", "countryClick()");
                scope.countryClick = function () {
                    window.alert(scope.getCountries()[scope.elementId].value);
                };
                element.attr("ng-class", "{active:hoverCountry===elementId}");
                element.removeAttr("country");
                $compile(element)(scope);
            }
        };
    }]);

    angular.module('TheApp').controller('internationalController', ['internationalService', '$scope', function (internationalService, $scope) {
        $scope.getCountries = function () {
            return internationalService.get();
        };
        $scope.changeHoverCountry = function (country) {
            $scope.hoverCountry = country;
        };
    }]);

}(window.angular));